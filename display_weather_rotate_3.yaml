esphome:
  name: display-chodba
  friendly_name: Display chodba

esp8266:
  board: nodemcuv2 #esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "__FILL_HERE__"

ota:
  password: "__FILL_HERE__"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test-8266 Fallback Hotspot"
    password: "fGKCZHhbUe7T"

captive_portal:

font:
  - file: 'arial-narrow.ttf'
    id: font1
    size: 18

  - file: 'arial-narrow-bold.ttf'
    id: font2
    size: 38


sensor:
  - platform: homeassistant
    id: forecast_temperature
    entity_id: sensor.openweathermap_forecast_temperature
    internal: true
  
  - platform: homeassistant
    id: forecast_temperature_low
    entity_id: sensor.openweathermap_forecast_temperature_low
    internal: true
  
  - platform: homeassistant
    id: forecast_condition
    entity_id: sensor.openweathermap_forecast_condition
    internal: true

  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.teplomer_venku_temperature
    internal: true
# Example configuration entry
i2c:
  sda: D1
  scl: D2

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: "my_display"
    reset_pin: D0
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          it.print(64, 0, id(font1), TextAlign::TOP_CENTER, "CURRENT");
          it.printf(64, 60, id(font2), TextAlign::BASELINE_CENTER , "%.1f°C", id(outside_temperature).state);
      - id: page2
        lambda: |-
          it.print(64, 0, id(font1), TextAlign::TOP_CENTER, "DAY");
          it.printf(64, 60, id(font2), TextAlign::BASELINE_CENTER , "%.1f°C", id(forecast_temperature).state);
      - id: page3
        lambda: |-
          it.print(64, 0, id(font1), TextAlign::TOP_CENTER, "NIGHT");
          it.printf(64, 60, id(font2), TextAlign::BASELINE_CENTER , "%.1f°C", id(forecast_temperature_low).state);

interval:
  - interval: 5s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

time:
  - platform: homeassistant
    on_time:
      # Every morning
      - cron: '0 25 6 * * *'
        then:
          - lambda: id(my_display).turn_on();
      # Every night
      - cron: '0 0 21 * * *'
        then:
          - lambda: id(my_display).turn_off();